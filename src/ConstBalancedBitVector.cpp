#include "ConstBalancedBitVector.h"

using namespace std;

namespace {

// [excess e-1][a byte B]. so the table return the offset(0-based) of B on which
// the right excess is e.
static const uint8_t _table[8][256] = {
  {
    0,  2,  0,  4,  0,  4,  0,  6,  0,  2,  0,  6,  0,  6,  0,  8,
    0,  2,  0,  6,  0,  6,  0,  8,  0,  2,  0,  8,  0,  8,  0, 10,
    0,  2,  0,  4,  0,  4,  0,  8,  0,  2,  0,  8,  0,  8,  0, 10,
    0,  2,  0,  8,  0,  8,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
    0,  2,  0,  4,  0,  4,  0,  8,  0,  2,  0,  8,  0,  8,  0, 10,
    0,  2,  0,  8,  0,  8,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
    0,  2,  0,  4,  0,  4,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
    0,  2,  0, 10,  0, 10,  0, 12,  0,  2,  0, 12,  0, 12,  0, 14,
    0,  2,  0,  4,  0,  4,  0,  6,  0,  2,  0,  6,  0,  6,  0, 10,
    0,  2,  0,  6,  0,  6,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
    0,  2,  0,  4,  0,  4,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
    0,  2,  0, 10,  0, 10,  0, 12,  0,  2,  0, 12,  0, 12,  0, 14,
    0,  2,  0,  4,  0,  4,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
    0,  2,  0, 10,  0, 10,  0, 12,  0,  2,  0, 12,  0, 12,  0, 14,
    0,  2,  0,  4,  0,  4,  0, 12,  0,  2,  0, 12,  0, 12,  0, 14,
    0,  2,  0, 12,  0, 12,  0, 14,  0,  2,  0, 14,  0, 14,  0, 16
  },
  {
    1,  3,  3,  5,  1,  5,  5,  7,  1,  5,  5,  7,  1,  7,  7,  9,
    1,  3,  3,  7,  1,  7,  7,  9,  1,  7,  7,  9,  1,  9,  9, 11,
    1,  3,  3,  7,  1,  7,  7,  9,  1,  7,  7,  9,  1,  9,  9, 11,
    1,  3,  3,  9,  1,  9,  9, 11,  1,  9,  9, 11,  1, 11, 11, 13,
    1,  3,  3,  5,  1,  5,  5,  9,  1,  5,  5,  9,  1,  9,  9, 11,
    1,  3,  3,  9,  1,  9,  9, 11,  1,  9,  9, 11,  1, 11, 11, 13,
    1,  3,  3,  9,  1,  9,  9, 11,  1,  9,  9, 11,  1, 11, 11, 13,
    1,  3,  3, 11,  1, 11, 11, 13,  1, 11, 11, 13,  1, 13, 13, 15,
    1,  3,  3,  5,  1,  5,  5,  9,  1,  5,  5,  9,  1,  9,  9, 11,
    1,  3,  3,  9,  1,  9,  9, 11,  1,  9,  9, 11,  1, 11, 11, 13,
    1,  3,  3,  9,  1,  9,  9, 11,  1,  9,  9, 11,  1, 11, 11, 13,
    1,  3,  3, 11,  1, 11, 11, 13,  1, 11, 11, 13,  1, 13, 13, 15,
    1,  3,  3,  5,  1,  5,  5, 11,  1,  5,  5, 11,  1, 11, 11, 13,
    1,  3,  3, 11,  1, 11, 11, 13,  1, 11, 11, 13,  1, 13, 13, 15,
    1,  3,  3, 11,  1, 11, 11, 13,  1, 11, 11, 13,  1, 13, 13, 15,
    1,  3,  3, 13,  1, 13, 13, 15,  1, 13, 13, 15,  1, 15, 15, 17
  },
  {
    2,  4,  4,  6,  4,  6,  6,  8,  2,  6,  6,  8,  6,  8,  8, 10,
    2,  6,  6,  8,  6,  8,  8, 10,  2,  8,  8, 10,  8, 10, 10, 12,
    2,  4,  4,  8,  4,  8,  8, 10,  2,  8,  8, 10,  8, 10, 10, 12,
    2,  8,  8, 10,  8, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
    2,  4,  4,  8,  4,  8,  8, 10,  2,  8,  8, 10,  8, 10, 10, 12,
    2,  8,  8, 10,  8, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
    2,  4,  4, 10,  4, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
    2, 10, 10, 12, 10, 12, 12, 14,  2, 12, 12, 14, 12, 14, 14, 16,
    2,  4,  4,  6,  4,  6,  6, 10,  2,  6,  6, 10,  6, 10, 10, 12,
    2,  6,  6, 10,  6, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
    2,  4,  4, 10,  4, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
    2, 10, 10, 12, 10, 12, 12, 14,  2, 12, 12, 14, 12, 14, 14, 16,
    2,  4,  4, 10,  4, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
    2, 10, 10, 12, 10, 12, 12, 14,  2, 12, 12, 14, 12, 14, 14, 16,
    2,  4,  4, 12,  4, 12, 12, 14,  2, 12, 12, 14, 12, 14, 14, 16,
    2, 12, 12, 14, 12, 14, 14, 16,  2, 14, 14, 16, 14, 16, 16, 18
  },
  {
    3,  5,  5,  7,  5,  7,  7,  9,  5,  7,  7,  9,  7,  9,  9, 11,
    3,  7,  7,  9,  7,  9,  9, 11,  7,  9,  9, 11,  9, 11, 11, 13,
    3,  7,  7,  9,  7,  9,  9, 11,  7,  9,  9, 11,  9, 11, 11, 13,
    3,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
    3,  5,  5,  9,  5,  9,  9, 11,  5,  9,  9, 11,  9, 11, 11, 13,
    3,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
    3,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
    3, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    3,  5,  5,  9,  5,  9,  9, 11,  5,  9,  9, 11,  9, 11, 11, 13,
    3,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
    3,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
    3, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    3,  5,  5, 11,  5, 11, 11, 13,  5, 11, 11, 13, 11, 13, 13, 15,
    3, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    3, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    3, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19
  },
  {
    4,  6,  6,  8,  6,  8,  8, 10,  6,  8,  8, 10,  8, 10, 10, 12,
    6,  8,  8, 10,  8, 10, 10, 12,  8, 10, 10, 12, 10, 12, 12, 14,
    4,  8,  8, 10,  8, 10, 10, 12,  8, 10, 10, 12, 10, 12, 12, 14,
    8, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
    4,  8,  8, 10,  8, 10, 10, 12,  8, 10, 10, 12, 10, 12, 12, 14,
    8, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
    4, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
    10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
    4,  6,  6, 10,  6, 10, 10, 12,  6, 10, 10, 12, 10, 12, 12, 14,
    6, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
    4, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
    10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
    4, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
    10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
    4, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
    12, 14, 14, 16, 14, 16, 16, 18, 14, 16, 16, 18, 16, 18, 18, 20
  },
  {
    5,  7,  7,  9,  7,  9,  9, 11,  7,  9,  9, 11,  9, 11, 11, 13,
    7,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
    7,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
    9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    5,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
    9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
    5,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
    9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
    5, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
    11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
    13, 15, 15, 17, 15, 17, 17, 19, 15, 17, 17, 19, 17, 19, 19, 21
  },
  {
    6,  8,  8, 10,  8, 10, 10, 12,  8, 10, 10, 12, 10, 12, 12, 14,
    8, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
    8, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
    10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
    8, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
    10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
    10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
    12, 14, 14, 16, 14, 16, 16, 18, 14, 16, 16, 18, 16, 18, 18, 20,
    6, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
    10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
    10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
    12, 14, 14, 16, 14, 16, 16, 18, 14, 16, 16, 18, 16, 18, 18, 20,
    10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
    12, 14, 14, 16, 14, 16, 16, 18, 14, 16, 16, 18, 16, 18, 18, 20,
    12, 14, 14, 16, 14, 16, 16, 18, 14, 16, 16, 18, 16, 18, 18, 20,
    14, 16, 16, 18, 16, 18, 18, 20, 16, 18, 18, 20, 18, 20, 20, 22
  },
  {
    7,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
    9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
    9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
    11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
    13, 15, 15, 17, 15, 17, 17, 19, 15, 17, 17, 19, 17, 19, 19, 21,
    9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
    11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
    11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
    13, 15, 15, 17, 15, 17, 17, 19, 15, 17, 17, 19, 17, 19, 19, 21,
    11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
    13, 15, 15, 17, 15, 17, 17, 19, 15, 17, 17, 19, 17, 19, 19, 21,
    13, 15, 15, 17, 15, 17, 17, 19, 15, 17, 17, 19, 17, 19, 19, 21,
    15, 17, 17, 19, 17, 19, 19, 21, 17, 19, 19, 21, 19, 21, 21, 23
  }
};

uint32_t findExcessInUnitNaive(const ConstBalancedBitVector &bits, uint64_t id,
    int excess) {
  int count = 0;
  int max = bits.count();
  for (int i = id; i < max; ++i) {
    if (bits.bitAt(i)) {
      ++count;
    } else {
      --count;
    }
    if (count == excess)  return i;
  }
  assert(false);
}

uint8_t findExcessInUnit(uint64_t unit, int excess) {
  uint8_t offset = 0;
  int excess_new = excess;
  while (true) {
    uint8_t byte = unit & 0xFF;
    if (excess_new <= 8) {
      uint8_t value = _table[excess_new - 1][byte];
      if (value < 8)  return offset + value;

      excess_new = value - 7;
    } else {
      uint8_t value = _table[7][byte];
      excess_new = excess_new - 8 + (value - 7);
    }
    unit >>= 8;
    offset += 8;
  }
}

uint64_t getNextUnit(const Vector<uint8_t> &bytes, uint64_t id) {
  uint64_t unit = 0;
  uint8_t *p = (uint8_t *)&unit;
  uint64_t byte_id = id / BIT_PER_BYTE;

  *p = bytes[byte_id];
  uint8_t bit_id = id % BIT_PER_BYTE;
  // turn all LSB 1, will flip to 0 before look up table.
  *p |= ~(~0 << bit_id); 

  int byte_count_remain = bytes.count() - byte_id;
  uint64_t byte_count = min(8, byte_count_remain);
  for (int i = 1; i < byte_count; ++i) {
    ++p;
    *p = bytes[byte_id + i];
  }
  return unit;
}

}

uint64_t ConstBalancedBitVector::findClose(uint64_t id) const {
  assert(!bitAt(id));
  uint64_t result = 0;
  uint64_t unit = 0;
  int excess = 0;
  uint32_t is_far_id = rank0(id) - 1;
  if (_is_fars[is_far_id]) {
    uint32_t is_pioneer_id = _is_fars.rank1(is_far_id) - 1;
    int32_t pioneer_id = _is_pioneers.rank1(is_pioneer_id) - 1;
    if (pioneer_id < 0)  return count() - 1;

    uint32_t pioneer = _pioneers[(uint64_t)pioneer_id] * BIT_PER_UNIT;
    int32_t excess_left = this->excess(id) - 1;
    excess = this->excess(pioneer - 1) - excess_left;

    unit = getNextUnit(bytes(), pioneer);
    unit = ~unit;
    result = pioneer + findExcessInUnit(unit, excess);
  } else {
    uint64_t new_id = id + 1;
    unit = getNextUnit(bytes(), new_id);
    unit = ~unit; // flip to make use of the table.
    uint8_t bit_id = new_id % BIT_PER_BYTE;
    // bits before id was turned to 0, so here +bit_id, 
    excess = bit_id + 1; 
    // and -bit_id from the result.
    result = new_id + findExcessInUnit(unit, excess) - bit_id;
  }
  return result;
}

uint64_t ConstBalancedBitVector::findCloseNaive(uint64_t offset) const {
  int count = 0;
  for (int i = offset + 1; i < this->count(); i++) {
    if (operator[](i)) {
      if (count == 0)  return i;
      --count;
    } else {
      ++count;
    }
  }
  assert(false);
}

uint64_t ConstBalancedBitVector::findOpenNaive(uint64_t offset) const {
  assert(operator[](offset));
  int count = 0;
  for (int i = offset - 1; i >= 0; --i) {
    if (operator[](i)) {
      ++count;	
    } else {
      if (count == 0)  return i;
      --count;
    }
  }
  assert(false);
}

uint64_t ConstBalancedBitVector::encloseNaive(uint64_t id) const {
  assert(0 < id && id < count());
  assert(!bitAt(id));
  int count = 0;
  int i;
  for (i = id - 1; i >= 0; --i) {
    if (bitAt(i)) {
      --count;
    } else {
      if (count == 0)  break;
      ++count;
    }
  }
  assert(i >= 0);
  int diff = id - i;
  if (diff > 64) {
    cout << "bit count:" << this->count() << "   enclose loops:" << diff << endl;
  }
  return i;
}

void ConstBalancedBitVector::read(istream &is) {
  ConstBitVector::read(is);
  _is_fars.read(is);
  _is_pioneers.read(is);
  _pioneers.read(is);
}

void ConstBalancedBitVector::clear() {
  ConstBitVector::clear();
  _is_fars.clear();
  _is_pioneers.clear();
  _pioneers.clear();
}

void ConstBalancedBitVector::display(ostream &os) const {
  ConstBitVector::display(os);

  os << "pioneers: ";
  _pioneers.display(os);
}

void ConstBalancedBitVector::display() const {
  this->display(cout);
}

