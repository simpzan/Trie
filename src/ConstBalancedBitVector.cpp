#include "ConstBalancedBitVector.h"

using namespace std;

namespace {

void display(uint64_t unit) {
	int count = 0;
	for (int i = 0; i < 64; ++i) {
		uint64_t mask = 1 << i;
		if (unit & mask) { // )
			++count;
		} else { // (
			--count;
		}
		if (i % 5 == 1)  cout << " " << i << ":";
		cout << (unit & mask ? 1 : 0);
	}
	cout << endl;
}

uint32_t findExcess(const ConstBalancedBitVector &bits, uint64_t id, 
		int excess) {
	int count = 0;
	int max = bits.count();
	int i;
	for (i = id; i < max; ++i) {
		if (bits.bitAt(i)) {
			++count;
		} else {
			--count;
		}
		if (count == excess)  break;
	}
	int diff = i - id;
	if (diff > 64) {
		cout << "diff:" << diff << " id:" << id << " excess:" << excess << endl;
		bits.display(cout);
		cout << endl;
	}
	//assert(false);
	return i;
}


uint8_t table_[8][256];
uint32_t selectExcess(uint64_t unit, int excess) {
	assert(-64 <= excess && excess <=64);
	uint8_t *p = (uint8_t *)&unit;
	int count = 0;
	for (int i = 0; i < 8; ++i) {
		uint8_t byte = p[i];
		for (int j = 0; j < 8; ++j) {
			uint8_t mask = 1 << j;
			if (byte & mask) {
				++count;
			} else {
				--count;
			}
			if (count == excess)  return i * 8 + j;
		}
	}
	assert(false);
	return 0;
}

}

uint64_t ConstBalancedBitVector::findClose(uint64_t id) const {
	assert(!bitAt(id));
	uint64_t result = 0;
	uint32_t is_far_id = rank0(id) - 1;
	const Vector<uint8_t> &bytes = this->bytes();
	uint64_t unit = 0;
	uint8_t *p = (uint8_t *)&unit;
	if (_is_fars[is_far_id]) {
		uint32_t is_pioneer_id = _is_fars.rank1(is_far_id) - 1;
		int32_t pioneer_id = _is_pioneers.rank1(is_pioneer_id) - 1;
		if (pioneer_id < 0)  return count() - 1;
		uint32_t pioneer = _pioneers[(uint64_t)pioneer_id] * BIT_PER_UNIT;

		int32_t excess_left = excess(id) - 1;
		int32_t excess = ConstBitVector::excess(pioneer - 1) - excess_left;
		//return findExcess(*this, pioneer, excess);

		uint64_t byte_id = pioneer / BIT_PER_BYTE;
		for (int i = 0; i < 8; ++i) {
			if (byte_id + i >= bytes.count())  break;
			*p = bytes[byte_id + i];
			++p;
		}
		result = pioneer + selectExcess(unit, excess);
	} else {
		uint64_t new_id = id + 1;
		uint64_t byte_id = new_id / BIT_PER_BYTE;
		for (int i = 0; i < 8; ++i) {
			if (byte_id + i >= bytes.count())  break;
			*p = bytes[byte_id + i];
			++p;
		}
		uint8_t bit_id = new_id % BIT_PER_BYTE;
		unit >>= bit_id;

		result = findExcess(*this, new_id, 1);
		//return id + selectExcess(unit, 1);
	}
	uint64_t expected = findCloseNaive(id);
	assert(expected == result);
	return result;
}

void ConstBalancedBitVector::read(istream &is) {
	ConstBitVector::read(is);
	_is_fars.read(is);
	_is_pioneers.read(is);
	_pioneers.read(is);
}

void ConstBalancedBitVector::clear() {
	ConstBitVector::clear();
	_is_fars.clear();
	_is_pioneers.clear();
	_pioneers.clear();
}

void ConstBalancedBitVector::display(ostream &os) const {
	ConstBitVector::display(os);

	os << "is_fars: ";
	_is_fars.display(os);
	os << "pioneers: ";
	_pioneers.display(os);
}

// [excess e][a byte B]. so the table return the offset(1-based) of B on which 
// the right excess is e.
static const uint8_t table_[8][256] = {
	{
		0,  2,  0,  4,  0,  4,  0,  6,  0,  2,  0,  6,  0,  6,  0,  8,
		0,  2,  0,  6,  0,  6,  0,  8,  0,  2,  0,  8,  0,  8,  0, 10,
		0,  2,  0,  4,  0,  4,  0,  8,  0,  2,  0,  8,  0,  8,  0, 10,
		0,  2,  0,  8,  0,  8,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
		0,  2,  0,  4,  0,  4,  0,  8,  0,  2,  0,  8,  0,  8,  0, 10,
		0,  2,  0,  8,  0,  8,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
		0,  2,  0,  4,  0,  4,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
		0,  2,  0, 10,  0, 10,  0, 12,  0,  2,  0, 12,  0, 12,  0, 14,
		0,  2,  0,  4,  0,  4,  0,  6,  0,  2,  0,  6,  0,  6,  0, 10,
		0,  2,  0,  6,  0,  6,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
		0,  2,  0,  4,  0,  4,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
		0,  2,  0, 10,  0, 10,  0, 12,  0,  2,  0, 12,  0, 12,  0, 14,
		0,  2,  0,  4,  0,  4,  0, 10,  0,  2,  0, 10,  0, 10,  0, 12,
		0,  2,  0, 10,  0, 10,  0, 12,  0,  2,  0, 12,  0, 12,  0, 14,
		0,  2,  0,  4,  0,  4,  0, 12,  0,  2,  0, 12,  0, 12,  0, 14,
		0,  2,  0, 12,  0, 12,  0, 14,  0,  2,  0, 14,  0, 14,  0, 16
	},
	{
		1,  3,  3,  5,  1,  5,  5,  7,  1,  5,  5,  7,  1,  7,  7,  9,
		1,  3,  3,  7,  1,  7,  7,  9,  1,  7,  7,  9,  1,  9,  9, 11,
		1,  3,  3,  7,  1,  7,  7,  9,  1,  7,  7,  9,  1,  9,  9, 11,
		1,  3,  3,  9,  1,  9,  9, 11,  1,  9,  9, 11,  1, 11, 11, 13,
		1,  3,  3,  5,  1,  5,  5,  9,  1,  5,  5,  9,  1,  9,  9, 11,
		1,  3,  3,  9,  1,  9,  9, 11,  1,  9,  9, 11,  1, 11, 11, 13,
		1,  3,  3,  9,  1,  9,  9, 11,  1,  9,  9, 11,  1, 11, 11, 13,
		1,  3,  3, 11,  1, 11, 11, 13,  1, 11, 11, 13,  1, 13, 13, 15,
		1,  3,  3,  5,  1,  5,  5,  9,  1,  5,  5,  9,  1,  9,  9, 11,
		1,  3,  3,  9,  1,  9,  9, 11,  1,  9,  9, 11,  1, 11, 11, 13,
		1,  3,  3,  9,  1,  9,  9, 11,  1,  9,  9, 11,  1, 11, 11, 13,
		1,  3,  3, 11,  1, 11, 11, 13,  1, 11, 11, 13,  1, 13, 13, 15,
		1,  3,  3,  5,  1,  5,  5, 11,  1,  5,  5, 11,  1, 11, 11, 13,
		1,  3,  3, 11,  1, 11, 11, 13,  1, 11, 11, 13,  1, 13, 13, 15,
		1,  3,  3, 11,  1, 11, 11, 13,  1, 11, 11, 13,  1, 13, 13, 15,
		1,  3,  3, 13,  1, 13, 13, 15,  1, 13, 13, 15,  1, 15, 15, 17
	},
	{
		2,  4,  4,  6,  4,  6,  6,  8,  2,  6,  6,  8,  6,  8,  8, 10,
		2,  6,  6,  8,  6,  8,  8, 10,  2,  8,  8, 10,  8, 10, 10, 12,
		2,  4,  4,  8,  4,  8,  8, 10,  2,  8,  8, 10,  8, 10, 10, 12,
		2,  8,  8, 10,  8, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
		2,  4,  4,  8,  4,  8,  8, 10,  2,  8,  8, 10,  8, 10, 10, 12,
		2,  8,  8, 10,  8, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
		2,  4,  4, 10,  4, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
		2, 10, 10, 12, 10, 12, 12, 14,  2, 12, 12, 14, 12, 14, 14, 16,
		2,  4,  4,  6,  4,  6,  6, 10,  2,  6,  6, 10,  6, 10, 10, 12,
		2,  6,  6, 10,  6, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
		2,  4,  4, 10,  4, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
		2, 10, 10, 12, 10, 12, 12, 14,  2, 12, 12, 14, 12, 14, 14, 16,
		2,  4,  4, 10,  4, 10, 10, 12,  2, 10, 10, 12, 10, 12, 12, 14,
		2, 10, 10, 12, 10, 12, 12, 14,  2, 12, 12, 14, 12, 14, 14, 16,
		2,  4,  4, 12,  4, 12, 12, 14,  2, 12, 12, 14, 12, 14, 14, 16,
		2, 12, 12, 14, 12, 14, 14, 16,  2, 14, 14, 16, 14, 16, 16, 18
	},
	{
		3,  5,  5,  7,  5,  7,  7,  9,  5,  7,  7,  9,  7,  9,  9, 11,
		3,  7,  7,  9,  7,  9,  9, 11,  7,  9,  9, 11,  9, 11, 11, 13,
		3,  7,  7,  9,  7,  9,  9, 11,  7,  9,  9, 11,  9, 11, 11, 13,
		3,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
		3,  5,  5,  9,  5,  9,  9, 11,  5,  9,  9, 11,  9, 11, 11, 13,
		3,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
		3,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
		3, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		3,  5,  5,  9,  5,  9,  9, 11,  5,  9,  9, 11,  9, 11, 11, 13,
		3,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
		3,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
		3, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		3,  5,  5, 11,  5, 11, 11, 13,  5, 11, 11, 13, 11, 13, 13, 15,
		3, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		3, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		3, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19
	},
	{
		4,  6,  6,  8,  6,  8,  8, 10,  6,  8,  8, 10,  8, 10, 10, 12,
		6,  8,  8, 10,  8, 10, 10, 12,  8, 10, 10, 12, 10, 12, 12, 14,
		4,  8,  8, 10,  8, 10, 10, 12,  8, 10, 10, 12, 10, 12, 12, 14,
		8, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
		4,  8,  8, 10,  8, 10, 10, 12,  8, 10, 10, 12, 10, 12, 12, 14,
		8, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
		4, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
		10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
		4,  6,  6, 10,  6, 10, 10, 12,  6, 10, 10, 12, 10, 12, 12, 14,
		6, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
		4, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
		10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
		4, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
		10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
		4, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
		12, 14, 14, 16, 14, 16, 16, 18, 14, 16, 16, 18, 16, 18, 18, 20
	},
	{
		5,  7,  7,  9,  7,  9,  9, 11,  7,  9,  9, 11,  9, 11, 11, 13,
		7,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
		7,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
		9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		5,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
		9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
		5,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
		9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
		5, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
		11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
		13, 15, 15, 17, 15, 17, 17, 19, 15, 17, 17, 19, 17, 19, 19, 21
	},
	{
		6,  8,  8, 10,  8, 10, 10, 12,  8, 10, 10, 12, 10, 12, 12, 14,
		8, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
		8, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
		10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
		8, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
		10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
		10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
		12, 14, 14, 16, 14, 16, 16, 18, 14, 16, 16, 18, 16, 18, 18, 20,
		6, 10, 10, 12, 10, 12, 12, 14, 10, 12, 12, 14, 12, 14, 14, 16,
		10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
		10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
		12, 14, 14, 16, 14, 16, 16, 18, 14, 16, 16, 18, 16, 18, 18, 20,
		10, 12, 12, 14, 12, 14, 14, 16, 12, 14, 14, 16, 14, 16, 16, 18,
		12, 14, 14, 16, 14, 16, 16, 18, 14, 16, 16, 18, 16, 18, 18, 20,
		12, 14, 14, 16, 14, 16, 16, 18, 14, 16, 16, 18, 16, 18, 18, 20,
		14, 16, 16, 18, 16, 18, 18, 20, 16, 18, 18, 20, 18, 20, 20, 22
	},
	{
		7,  9,  9, 11,  9, 11, 11, 13,  9, 11, 11, 13, 11, 13, 13, 15,
		9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
		9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
		11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
		13, 15, 15, 17, 15, 17, 17, 19, 15, 17, 17, 19, 17, 19, 19, 21,
		9, 11, 11, 13, 11, 13, 13, 15, 11, 13, 13, 15, 13, 15, 15, 17,
		11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
		11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
		13, 15, 15, 17, 15, 17, 17, 19, 15, 17, 17, 19, 17, 19, 19, 21,
		11, 13, 13, 15, 13, 15, 15, 17, 13, 15, 15, 17, 15, 17, 17, 19,
		13, 15, 15, 17, 15, 17, 17, 19, 15, 17, 17, 19, 17, 19, 19, 21,
		13, 15, 15, 17, 15, 17, 17, 19, 15, 17, 17, 19, 17, 19, 19, 21,
		15, 17, 17, 19, 17, 19, 19, 21, 17, 19, 19, 21, 19, 21, 21, 23
	}
};

